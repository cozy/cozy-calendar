// Generated by CoffeeScript 1.6.3
var CozyAdapter, CozyInstance, Event, MailHandler, async, e, fs, jade, moment;

async = require('async');

jade = require('jade');

fs = require('fs');

moment = require('moment');

Event = require('../models/event');

CozyInstance = require('../models/cozy_instance');

try {
  CozyAdapter = require('americano-cozy/node_modules/jugglingdb-cozy-adapter');
} catch (_error) {
  e = _error;
  CozyAdapter = require('jugglingdb-cozy-adapter');
}

module.exports = MailHandler = (function() {
  function MailHandler() {
    var file,
      _this = this;
    this.templates = {};
    file = __dirname + '/mail_invitation.jade';
    fs.readFile(file, 'utf8', function(err, jadeString) {
      if (err) {
        throw err;
      }
      return _this.templates.invitation = jade.compile(jadeString);
    });
    file = __dirname + '/mail_update.jade';
    fs.readFile(file, 'utf8', function(err, jadeString) {
      if (err) {
        throw err;
      }
      return _this.templates.update = jade.compile(jadeString);
    });
    file = __dirname + '/mail_delete.jade';
    fs.readFile(file, 'utf8', function(err, jadeString) {
      if (err) {
        throw err;
      }
      return _this.templates.deletion = jade.compile(jadeString);
    });
  }

  MailHandler.prototype.sendInvitations = function(event, callback) {
    var guests, needSaving,
      _this = this;
    guests = event.toJSON().attendees;
    needSaving = false;
    return CozyInstance.getURL(function(err, domain) {
      if (err) {
        console.log(err.stack);
        return callback();
      }
      return async.forEach(guests, function(guest, cb) {
        var date, dateFormat, mailOptions, subject, template;
        if (guest.status === 'INVITATION-NOT-SENT') {
          subject = "Invitation : " + event.description;
          template = _this.templates.invitation;
        } else {
          return cb();
        }
        dateFormat = 'MMMM Do YYYY, h:mm a';
        date = moment(event.start).format(dateFormat);
        mailOptions = {
          to: guest.email,
          subject: subject,
          html: template({
            event: event.toJSON(),
            key: guest.key,
            date: date,
            url: "https://" + domain + "/public/calendar/event" + event.id
          })
        };
        return CozyAdapter.sendMailFromUser(mailOptions, function(err) {
          if (!err) {
            needSaving = true;
            guest.status = 'NEEDS-ACTION';
          }
          return cb();
        });
      }, function(err) {
        if (!needSaving) {
          return callback();
        } else {
          return event.updateAttributes({
            attendees: guests
          }, callback);
        }
      });
    });
  };

  MailHandler.prototype.sendDeleteNotification = function(event, callback) {
    var _this = this;
    return async.forEach(event.toJSON().attendees, function(guest, cb) {
      var mailOptions;
      if (guest.status !== 'ACCEPTED') {
        return cb(null);
      }
      mailOptions = {
        to: guest.email,
        subject: "This event has been canceled : " + event.description,
        html: _this.templates.deletion({
          event: event.toJSON(),
          key: guest.key
        })
      };
      return CozyAdapter.sendMailFromUser(mailOptions, function(err) {
        if (err) {
          console.log(err);
        }
        return cb();
      });
    }, callback);
  };

  return MailHandler;

})();
